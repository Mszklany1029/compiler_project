
    (*CASES FOR OTHER TYPES*)
(*fun dig (t : T.ty) (tenv : tenv) (pos : A.pos) (tys : T.ty list) : T.ty =
  let 
    (*val start = (print "starting type : ")
    val st = print (typeToStr t)*)
    val strt = print "\n"
  in 
      (case t
        of T.NAME(symb, tyop) =>
          (case !tyop 
            of SOME ty => ( if List.exists (fn ty => ty = t) tys then (ErrorMsg.error pos ("LOOP: Mutually recursive type cycle detected"); T.BOTTOM) else 
              let 
                val test = dig ty tenv pos (t :: tys)
                (*val pre = print "outer level: " 
                val pri = print (Symbol.name symb)
                val prin = print " "
                val tnt = print (typeToStr test)*)
                val pls = print "\n"
              in 
                tyop := SOME test; test
              end)
              | NONE =>
                  (case Symbol.look(tenv, symb)
                    of SOME s => (if List.exists (fn ty => ty = t) tys then (ErrorMsg.error pos ("LOOP: Mutually recursive type cycle detected"); T.BOTTOM) else 
                      let 
                        val t = (dig s tenv pos (t :: tys))
                        (*val p = print "inner SOME level: " 
                        val pr =  print (Symbol.name symb) 
                        val pri = print " " 
                        val prin = print (typeToStr t)*)
                        val pls = print "\n"
                      in 
                        tyop := SOME t;
                        t
                      end)
                    | NONE => 
                        let
                          (*val p = print "Inner NONE level: "
                          val pr = print (Symbol.name symb)  
                          val pri = print " " 
                          val prin = print (typeToStr t)*) 
                          val pls = print "\n"
                        in
                          t
                        end(*tyop := SOME t;*) 
                  )
            )
         (* | T.ARRAY(otherty, u) => T.ARRAY(otherty, u)*)
          | _ => let

                val pre = print "Final case: " 
                val tnt = print (typeToStr t)
                val pls = print "\n"

                 in
                   t
                 end
      ) 
  end *)



         (*if checkNil pos ((transExp venv tenv init), T.NIL) then
       (ErrorMsg.error pos "TYPE : Use of nil initializing expression without
       record type"; {venv = Symbol.enter(venv, name, Env.VarEntry{ty =
       T.BOTTOM}), tenv = tenv}) else {venv = Symbol.enter(venv, name,Env.VarEntry{ ty = (transExp venv tenv init)}), tenv = tenv})*)
    (*check iniital, check supply type is given, update valenv appropriately, var x: recordtype := nil*) 



