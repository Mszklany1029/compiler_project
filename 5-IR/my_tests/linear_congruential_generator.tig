/*A pseudo-random number generator, LCGs are of the oldest and most well known PRNG methods.*/
/*While I wouldn't recommend this one for any security utilities due to it being very deterministic in nature, its perfect for when you need to introduce some perceived randomness into a program*/
let
	
	type any = {any : int}
	var buffer := getchar()

	function readint(any: any) : int =
	 let var i := 0
		 function isdigit(s : string) : int = 
			  ord(buffer)>=ord("0") & ord(buffer)<=ord("9")
		 function skipto() =
		   while buffer=" " | buffer="\n"
			 do buffer := getchar()
	  in skipto();
		 any.any := isdigit(buffer);
		 while isdigit(buffer)
		   do (i := i*10+ord(buffer)-ord("0"); buffer := getchar());
		 i
	 end

	 type list = {first: int, rest: list}

	 type alist = array of int

	 function readlist() : list =
		let var any := any{any=0}
			var i := readint(any)
		 in if any.any
			 then list{first=i,rest=readlist()}
			 else nil
		end

	 function printlist(l: list) =
	   if l=nil then print("\n")
	   else (printint(l.first); print(" "); printlist(l.rest))

	 function length (l : list) : int =
		if l = nil then 0 else 1 + length(l.rest)

	 function toArray (l : list) : alist =
	   let var a : alist := alist[length(l)] of 0
		   var len := length(l)
	   in
	   for i := 0 to len - 1 do
		(a[i] := l.first;
		l := l.rest);
	   a
	   end

	function mod(a : int, b : int) : int =
		a - b * (a/b)
	
	/*type arr = array of int*/
	function linearCongruentialGenerator(seed : int, m : int, a : int, c : int, num : int) = 
		let
			var randomNums := alist[num] of 0
		in 
			randomNums[0] := seed;
			for i := 1 to num do(
				randomNums[i] := mod((randomNums[i - 1] * a) + c, m) 
				);
			printRand(randomNums, num)
		end

	function printint(i: int) =
	  let function f(i:int) = if i>0 
			 then (f(i/10); print(chr(i-i/10*10+ord("0"))))
	   in if i<0 then (print("-"); f(-i))
		  else if i>0 then f(i)
		  else print("0")
	  end
	
	function printRand(a : alist, length : int) =
		let
			var randomNum : string := ""
			var temp : int := 0
		in 
			for i := 0 to length do(
				temp := a[i];
				printint(temp)
			)
		end

	function lcgWrapper(a : alist) = 
		let
			var seed := a[0]
			var mod := a[1]
			var mul := a[2]
			var inc := a[3]
			var num := a[4]
			var test := printint(seed)
		in 
			linearCongruentialGenerator(seed, mod, mul, inc, num)
		end

	var list : list := readlist()
	var len := length(list)
	var alist := toArray(list)


in 
print("Enter 5 numbers: a seed, a modulus, a multiplier, an increment, and number of digits to generate\n");

lcgWrapper(alist)

end
