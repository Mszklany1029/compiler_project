let
	type arr = array of int
	/*type arr2 = array of int*/
	/*type arr3 = array of int*/
	type matrix = array of arr
	/*type matrix2 = array of arr2*/
	/*type matrix3 = array of arr3*/

	var m1 := arr[3] of 0
	var n1 := matrix[4] of m1
	

	var m2 := arr[4] of 0
	var n2 := matrix[3] of m2

	var m2_1 := arr[4] of 0
	var m2_2 := arr[4] of 0
	var m2_3 := arr[4] of 0


	function printint(i: int) =
		  let function f(i:int) = if i>0 
				 then (f(i/10); print(chr(i-i/10*10+ord("0"))))
		   in if i<0 then (print("-"); f(-i))
			  else if i>0 then f(i)
			  else print("0")
		  end

	function setupMat(mat : matrix, ndim : int, mdim : int) = 
			for i := 0 to ndim - 1 do(
				for j := 0 to mdim - 1 do(
					mat[i][j] := j
					)
				)

	function printMat(mat : matrix, ndim : int, mdim : int) =
		for i := 0 to ndim-1 do(
			for j := 0 to mdim-1 do(
				printint(n1[i][j]);
				print(" ")
				);
				print("\n")
			)

	function multiply (mat1 : matrix, m : int, n1 : int, mat2 : matrix, n2 : int, p : int) =
		let
			var cols := arr[m] of 0
			var rmat := matrix[p] of cols
		in 
			for i := 0 to m-1 do(
				for j := 0 to p-1 do(
					rmat[i][j] := 0;
					for k := 0 to n1 do(
						rmat[i][j] := rmat[i][j] + (mat1[i][k] * mat2[k][j])
					);
					printint(rmat[i][j]);
					print(" ");
				);
				print("\n")
			);
			printMat(rmat, 4, 4)
		end

	
	function multiply_wrapper (mt1 : matrix, n1 : int, m1 : int, mt2 : matrix, n2 : int, m2 : int) =
		if (m1 <> n2 ) then print("ERROR: BAD DIMENSIONS") else multiply(mt1, n1, m1, mt2, n2, m2)

in 
	printMat(n2, 3, 4);
	setupMat(n1, 4, 3);
	printMat(n1, 4, 3);
	print("\n");
	setupMat(n2, 3, 4);
	printMat(n2, 3, 4);
	print("\n");
	multiply_wrapper(n1, 4, 3, n2, 3, 4)

end
