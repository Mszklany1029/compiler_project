/* Computes products via repeated addition */
let
    /* reading in and writing out ints */
    type any = {any : int}
    var buffer := getchar()

    function printint(i: int) =
    let function f(i:int) = if i>0 
            then (f(i/10); print(chr(i-i/10*10+ord("0"))))
    in if i<0 then (print("-"); f(-i))
        else if i>0 then f(i)
        else print("0")
    end

    function readint(any: any) : int =
    let var i := 0
        function isdigit(s : string) : int = 
            ord(buffer)>=ord("0") & ord(buffer)<=ord("9")
        function skipto() =
        while buffer=" " | buffer="\n"
            do buffer := getchar()
    in skipto();
        any.any := isdigit(buffer);
        while isdigit(buffer)
        do (i := i*10+ord(buffer)-ord("0"); buffer := getchar());
        i
    end

    /* inputs */
    var any := any{any=0}
    var m := readint(any)
    var n := readint(any)

    /* computing product */
    function slow_product(m : int, n : int) : int =
        let
            var r := 0
        in
        for i := 0 to m - 1 do r := r + n; r
        end

    var res := slow_product(m, n)
in
printint(res)
end
